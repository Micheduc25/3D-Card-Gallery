/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { Vector2, Vector3 } from "three";
import { useFrame } from "@react-three/fiber";

import * as TWEEN from "@tweenjs/tween.js";

export default function Model({
  frontImage = "/images/carousel/1.jpg",
  backImage = "/images/carousel/2.jpg",
  podiumColor,
  wallColor,
  slideChange,
}) {
  const group = useRef();

  const image1Mesh = useRef();
  const image2Mesh = useRef();

  const [isFlipped, setIsFlipped] = useState(false);
  const [isTextureSet, setIsTextureSet] = useState(false);

  const { nodes, materials } = useGLTF("/models/Carte collectionable New.gltf");

  const [texture1, texture2] = useTexture(
    [frontImage, backImage],
    (textures) => {}
  );

  const [animation, setAnimation] = useState({
    active: false,
    direction: "next",
  });

  useFrame((state) => {
    // // TWEEN.update(state.clock.elapsedTime);
    if (animation.active) {
      // state.camera.lookAt(group.current.position);
      if (animation.direction == "next") {
        group.current.rotation.y += 0.1;
        group.current.position.x -= 0.8;
        // group.current.position.y += 0.05;
      } else {
        group.current.rotation.y += 0.1;
        group.current.position.x += 0.8;
        // group.current.position.y += 0.05;
        // group.current.position.x -= 0.1;
      }
    } else {
      group.current.rotation.y = 0;
      group.current.position.x = 0;
    }
  });

  useEffect(() => {
    if (!isFlipped) {
    }
  }, []);

  useEffect(() => {
    texture1.center = new Vector2(0.5, 0.5);
    texture1.rotation = Math.PI;
    texture2.center = new Vector2(0.5, 0.5);
    texture2.rotation = Math.PI;
    image1Mesh.current.material.map = texture1;
    image1Mesh.current.material.map.flipY = false;

    image2Mesh.current.material.map = texture2;
    image2Mesh.current.material.map.flipY = false;

    setIsTextureSet(true);
  }, []);

  useEffect(() => {
    // texture1.rotation = Math.PI;
    // texture2.rotation = Math.PI;
    // image1Mesh.current.material.map = texture1;
    // image2Mesh.current.material.map = texture2;

    setAnimation({ ...slideChange });
  }, [slideChange]);
  return (
    <group ref={group} dispose={null} position={[0, -1.5, 0]}>
      <mesh
        geometry={nodes.Support.geometry}
        material={materials.Verre}
        position={[0, 0.5, 0]}
      >
        <group position={[0, 1.6, -0.06]}>
          <mesh
            geometry={nodes.Plane001.geometry}
            material={materials.Image2}
            ref={image2Mesh}
            receiveShadow={true}
            castShadow={true}
          />
          <mesh
            geometry={nodes.Plane001_1.geometry}
            material={materials["Matériau carte"]}
            receiveShadow={true}
            castShadow={true}
          />
        </group>
        <group position={[0, 1.6, 0.01]}>
          <mesh
            ref={image1Mesh}
            geometry={nodes.Plane003.geometry}
            material={materials.Image1}
            receiveShadow={true}
            material-color={"white"}
            castShadow={true}
          />
          <mesh
            geometry={nodes.Plane003_1.geometry}
            material={materials["Matériau carte"]}
            receiveShadow={true}
            castShadow={true}
          />
        </group>
      </mesh>
      <mesh
        geometry={nodes.Podium.geometry}
        material={materials.Podium}
        position={[0, 0.14, 0]}
        material-color={podiumColor}
        receiveShadow={true}
      />
      <group position={[0, 0.14, 0]}>
        <mesh
          geometry={nodes.Cylinder002.geometry}
          material={materials["Sol et murs"]}
          material-color={wallColor}
          receiveShadow={true}
          // castShadow={true}
        />
        <mesh
          geometry={nodes.Cylinder002_1.geometry}
          material={materials.Verre}
          receiveShadow={true}
          // material-color={"white"}
          castShadow={true}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/Carte collectionable New.gltf");
